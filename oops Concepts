OBJECT ORIENTED PROGRAMMING - oop is a methodology or paradigsm to design a program using class and objects.

* CLASS - Class is a user-defined data type which defines its properties and its functions. Class is the only logical representation of the data.
For example, Human being is a class. The body parts of a human being are its properties, and the actions performed by the body parts are known as functions.
The class does not occupy any memory space till the time an object is instantiated. 

* OBJECTS - Object is a run-time entity. It is an instance of the class. An object can represent a person, place or any other item.
An object can operate on both data members and member functions. 


eX - 1 class Pen {
    String color;
    String type; // ball pen or jel pen
    
    public void write(){
        System.out.println("writing something");
    }
    public void printColor(){
        System.out.println(this.color);
    }
}
public class OOPS {
    public static void main(String[] args){
        Pen Pen1 = new Pen();
        Pen1.color = "blue";
        Pen1.type = "jel";
        
        Pen Pen2 = new Pen();
        Pen2.color = "black";
        Pen2.type = "ball";
        Pen1.printColor();
        Pen2.printColor();
    }
}
// OUTPUT - 
blue
black

eX - 2 class Pen {
    String color;
    String type; // ball pen or jel pen
    
    public void write(){
        System.out.println("writing something");
    }
    public void printColor(){
        System.out.println(this.color);
    }
}

class Student{
    String name;
    int age;
    public void printInfo(){
        System.out.println(this.name);
        System.out.println(this.age);
    }
}
it have the same name 
public class OOPS {
    public static void main(String[] args){
        Student s1 = new Student();
        s1.name = "aman";
        s1.age = 24;
        s1.printInfo();
    }
}
// OUTPUT - 
aman
24

-> Note : When an object is created using a new keyword, then space is allocated for the variable in a heap, and the starting address is stored in the stack memory.
‘this’ keyword :  ‘this’ keyword in Java that refers to the current instance of the class. 
In OOPS it is used to: 
- pass the current object as a parameter to another method 
- refer to the current class instance variable


* constructor - Constructor is a special method which is invoked automatically at the time of object creation. 
It is used to initialize the data members of new objects generally. 

PROPERTIES OF CONSTRUCTOR - 
1- it does not return anything
2- it have the same name as class or structure
3- Constructors are only called once, at object creation.


* TYPES OF CONSTUCTOR - 
1 NON - PARAMETRIZED CONSTRUCTOR - A constructor which has no argument is known as non-parameterized constructor(or no-argument constructor). 
It is invoked at the time of creating an object. If we don’t create one then it is created by default by Java.

class Student{
    String name;
    int age;
    public void printInfo(){
        System.out.println(this.name);
        System.out.println(this.age);
    }
    Student(){ // non parametrized constructor
        System.out.println("constructor called");
    }
}

public class OOPS {
    public static void main(String[] args){
        Student s1 = new Student();
        s1.name = "aman";
        s1.age = 24;
        s1.printInfo();
    }
}
2 - PARAMETRIZED CONSTRUCTOR - Constructor which has parameters is called a parameterized constructor. It is used to provide 
different values to distinct objects.
class Student{
    String name;
    int age;
    public void printInfo(){
        System.out.println(this.name);
        System.out.println(this.age);
    }
    Student( String name, int age){ //  parametrized constructor
        this.name = name;
        this.age = age;
    }
}

public class OOPS {
    public static void main(String[] args){
        Student s1 = new Student("aman",24);
        s1.printInfo();
    }
}

3- COPY CONSTRUCTOR - A Copy constructor is an overloaded 
constructor used to declare and initialize an object from another object. There is only a user defined copy constructor in Java(C++ has a default one too).


class Student{
    String name;
    int age;
    public void printInfo(){
        System.out.println(this.name);
        System.out.println(this.age);
    }
    Student(Student s2){ //  copy constructor
        this.name = s2.name;
        this.age = s2.age;
    }
    Student(){
        
    }
}

public class OOPS {
    public static void main(String[] args){
        Student s1 = new Student();
        s1.name = "aman";
        s1.age = 24;
        
        Student s2 = new Student(s1);
        s1.printInfo();
    }
}

* DESTRUCTOR - In  java we does not write destructor because in java having the garbage collector. 
Instead, Java has an efficient  garbage collector that deallocates memory automatically.


* OOPS CONCEPTS - 

* POLYMORPHISM - Polymorphism is the ability to present the same interface for differing underlying forms (data types). 
With polymorphism, each of these classes will have different underlying data. Precisely, Poly means ‘many’ and morphism means ‘forms’

* TYPES OF POLYMORPHISM 

1 - COMPILE TIME POLYMORPHISM - The polymorphism which is implemented at the compile time is known as compile-time polymorphism. 
Example - Method Overloading 

2 - RUN TIME POLYMORPHISM - Runtime polymorphism is also known as dynamic polymorphism. Function overriding is an example of runtime polymorphism. 
Function overriding means when the child class contains the method which is already present in the parent class. 
Hence, the child class overrides the method of the parent class. In case of function overriding, parent and child classes both contain the same function with a different definition. 
The call to the function is determined at runtime is known as runtime polymorphism.


class Student{
    String name;
    int age;
    
    
    public void printInfo(String name){
        System.out.println(name);
    }
    
    public void printInfo(int age){
        System.out.println(age);
    }
    public void printInfo(String name, int age){
        System.out.println(name + " " + age);
    }
}

public class OOPS {
    public static void main(String[] args){
        Student s1 = new Student();
        s1.name = "aman";
        s1.age = 24;
        
        s1.printInfo(s1.name, s1.age);
    }
}

2 - INHERITANCE - Inheritance is a process in which one object acquires all the properties and behaviors of its parent object automatically. 
In such a way, you can reuse, extend or modify the attributes and behaviors which are defined in other classes. 
In Java, the class which inherits the members of another class is called derived class and the class whose members are inherited is called base class. 
The derived class is the specialized class for the base class.

class Shape {
    String color;
}

class Triangle extends Shape{
    
}
public class OOPS {
    public static void main(String[] args){
        Triangle T1 = new Triangle;
        T1.color = "blue";
        
    }
}

* TYPES OF INHERITANCE - 
1 - SINGLE LEVEL INHERITANCE -  When one class inherits another class, it is known as single level inheritance 

class Shape {
    public void area(){
        System.out.println("displays area");
    }
}
class Triangle extends Shape{
    public void area(int l, int h){
        System.out.println(1/2*l*h);
    }
    
}
public class OOPS{
    public static void main(String[] args){
        
    }
}

2- MULTILEVEL INHERITANCE - Multilevel inheritance is a process of deriving a class from another derived class

class Shape {
    public void area(){
        System.out.println("displays area");
    }
}
class Triangle extends Shape{
    public void area(int l, int h){
        System.out.println(1/2*l*h);
    }
    
}
class Equilateral extends Triangle{
    public void area(int l, int h){
        System.out.println(1/2*l*h);
    }
}
public class OOPS{
    public static void main(String[] args){
        
    }
}

3 - HIERARICAL INHERITANCE -  Hierarchical inheritance is defined as the process of deriving more than one class from a base class. 

class Shape {
    public void area(){
        System.out.println("displays area");
    }
}
class Triangle extends Shape{
    public void area(int l, int h){
        System.out.println(1/2*l*h);
    }
    
}

class Circle extends Shape{
    public void area(int r){
        System.out.println((3.14)*r*r);
    }
}
public class OOPS{
    public static void main(String[] args){
        
    }
}

4 - Hybrid inheritance : Hybrid inheritance is a combination of simple, multiple inheritance and hierarchical inheritance. 

* PACKAGES - Package is a group of similar types of classes, interfaces and sub-packages. Packages can be built-in or user defined.
Built-in packages - java, util, io etc.

* Access Modifiers in Java - 

1 - Private: The access level of a private modifier is only within the class. It cannot be accessed from outside the class.

2 - Default: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. 
If you do not specify any access level, it will be the default.

3 - Protected: The access level of a protected modifier is within the package and outside the package through child class. 
If you do not make the child class, it cannot be accessed from outside the package.

4 -Public: The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package and outside the package.

3 - ENCAPSULATION - Encapsulation is the process of combining data and functions into a single unit called class. In Encapsulation, the data is not accessed directly; it is accessed through the functions present inside the class. 
In simpler words, attributes of the class are kept private and public getter and setter methods are provided to manipulate these attributes. Thus, encapsulation makes the concept of data hiding possible.(Data hiding: a language feature to restrict access to members of an object, reducing the negative effect due to dependencies.
e.g. "protected", "private" feature in Java).



4 - ABSTRACTION - We try to obtain an abstract view, model or structure of a real life problem, and reduce its unnecessary details. With definition of properties of problems, including the data which are affected and the operations which are identified, 
the model abstracted from problems can be a standard solution to this type of problems. It is an efficient way since there are nebulous real-life problems that have similar properties. 
In simple terms, it is hiding the unnecessary details & showing only the essential parts/functionalities to the user.

// Data binding : Data binding is a process of binding the application UI and business logic. Any change made in the business logic will reflect directly to the application UI.

Ex - 1 abstract class Animal {
    abstract void walk();
    
}
class Horse extends Animal {
    public void walk(){
        System.out.println("walks on 4 legs");
    }
}
class Chicken extends Animal {
    public void walk(){
        System.out.println("walks on 2 legs");
    }
}
public class OOPS {
    public static void main(String [] args){
        Horse h1 = new Horse();
        h1.walk();
        
    }
}

Ex - 2 abstract class Animal {
    abstract void walk();
    public void eat(){
        System.out.println("Animal eats");
    }
    
}
class Horse extends Animal {
    public void walk(){
        System.out.println("walks on 4 legs");
    }
}
class Chicken extends Animal {
    public void walk(){
        System.out.println("walks on 2 legs");
    }
}
public class OOPS {
    public static void main(String [] args){
        Horse h1 = new Horse();
        h1.walk();
        h1.eat();
        
        
    }
}

* Abstraction is achieved in 2 ways :
Abstract class
Interfaces (Pure Abstraction)

Abstract Class
An abstract class must be declared with an abstract keyword.
It can have abstract and non-abstract methods.
It cannot be instantiated.
It can have constructors and static methods also.
It can have final methods which will force the subclass not to change the body of the method.

* GETTERS - us private cheez ki information bapas de dijiye 
* SETTERS - us private cheez ki value ko set kar dijiye

package Bank;

class Account {
    public String name;
    protected String email;
    private String password;
    // getters
    public String getPassword(){
        return this.password;
    }
    // setters
    public void setPassword(String pass){
        this.password = pass;
    }
}
public class Bank{
    public static void main(String[] args){
        Account A1 = new Account();
        A1.name = "GLA UNIVERSITY";
        A1.email = "GLA.ac.in";
        A1.setPassword("abcd");
        System.out.println(A1.getPassword());
    }
    
}


